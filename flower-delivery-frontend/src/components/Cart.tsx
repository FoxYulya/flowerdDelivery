import React, { useState, useCallback } from "react";
import { Link, useParams } from "react-router-dom";
import axios from "axios";
import { useCart } from "../hooks/useCart";
import type { OrderData } from "../types/index";
import { useNavigate } from "react-router-dom";
import GoogleMapComponent from "./GoogleMapComponent";

const API_BASE_URL = "https://flowerddelivery-1.onrender.com/";

const SHOP_LOCATIONS = {
  1: {
    lat: 50.4501,
    lng: 30.5234,
    name: '–ö–≤—ñ—Ç–∫–æ–≤–∞ –∫—Ä–∞–º–Ω–∏—Ü—è "–¢—Ä–æ—è–Ω–¥–∞"',
    address: "–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 15, –ö–∏—ó–≤",
  },
  2: {
    lat: 49.8397,
    lng: 24.0297,
    name: '–°–∞–¥–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä "–¢—é–ª—å–ø–∞–Ω"',
    address: "–ø—Ä. –ü–µ—Ä–µ–º–æ–≥–∏, 42, –õ—å–≤—ñ–≤",
  },
  3: {
    lat: 46.4825,
    lng: 30.7233,
    name: '–ï–ª—ñ—Ç–Ω—ñ –±—É–∫–µ—Ç–∏ "–û—Ä—Ö—ñ–¥–µ—è"',
    address: "–≤—É–ª. –°–∞–¥–æ–≤–∞, 7, –û–¥–µ—Å–∞",
  },
};

const SimpleRobotCaptcha: React.FC<{
  onVerify: (isValid: boolean) => void;
  isVisible: boolean;
}> = ({ onVerify, isVisible }) => {
  const [isChecked, setIsChecked] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const checked = e.target.checked;
    setIsChecked(checked);
    onVerify(checked);
  };

  if (!isVisible) return null;

  return (
    <div
      style={{
        border: "2px solid rgba(168, 85, 247, 0.3)",
        borderRadius: "12px",
        padding: "20px",
        background:
          "linear-gradient(135deg, rgba(26, 26, 26, 0.95) 0%, rgba(30, 30, 30, 0.95) 100%)",
        marginTop: "1.5rem",
        boxShadow: "0 8px 32px rgba(168, 85, 247, 0.1)",
        backdropFilter: "blur(10px)",
        animation: "fadeInScale 0.4s ease-out",
      }}
    >
      <div style={{ display: "flex", alignItems: "center", gap: "16px" }}>
        <div
          style={{
            position: "relative",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          <input
            type="checkbox"
            id="robot-captcha"
            checked={isChecked}
            onChange={handleChange}
            style={{
              width: "22px",
              height: "22px",
              cursor: "pointer",
              accentColor: "#a855f7",
              transform: "scale(1.1)",
            }}
          />
        </div>
        <label
          htmlFor="robot-captcha"
          style={{
            cursor: "pointer",
            fontSize: "16px",
            fontWeight: "500",
            color: "#ffffff",
            userSelect: "none",
            flex: 1,
          }}
        >
          –Ø –Ω–µ —Ä–æ–±–æ—Ç
        </label>
        <div
          style={{
            display: "flex",
            alignItems: "center",
            gap: "10px",
            padding: "8px 12px",
            background: "rgba(168, 85, 247, 0.1)",
            borderRadius: "8px",
            border: "1px solid rgba(168, 85, 247, 0.2)",
          }}
        >
          <div
            style={{
              width: "24px",
              height: "24px",
              background: "linear-gradient(135deg, #a855f7 0%, #8b5cf6 100%)",
              borderRadius: "4px",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "12px",
              boxShadow: "0 2px 8px rgba(168, 85, 247, 0.3)",
            }}
          >
            üõ°Ô∏è
          </div>
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "flex-start",
            }}
          >
            <span
              style={{
                fontSize: "11px",
                color: "#a855f7",
                fontWeight: "600",
                letterSpacing: "0.5px",
              }}
            >
              reCAPTCHA
            </span>
            <span
              style={{
                fontSize: "9px",
                color: "rgba(255, 255, 255, 0.6)",
                marginTop: "-2px",
              }}
            >
              Protected
            </span>
          </div>
        </div>
      </div>
      {isChecked && (
        <div
          style={{
            marginTop: "12px",
            padding: "8px 12px",
            background: "rgba(34, 197, 94, 0.1)",
            border: "1px solid rgba(34, 197, 94, 0.3)",
            borderRadius: "6px",
            display: "flex",
            alignItems: "center",
            gap: "8px",
            animation: "fadeIn 0.3s ease-out",
          }}
        >
          <span style={{ color: "#22c55e", fontSize: "14px" }}>‚úì</span>
          <span
            style={{ color: "#22c55e", fontSize: "14px", fontWeight: "500" }}
          >
            –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—Ä–æ–π–¥–µ–Ω–æ
          </span>
        </div>
      )}
      <style>
        {`
          @keyframes fadeInScale {
            from {
              opacity: 0;
              transform: scale(0.95);
            }
            to {
              opacity: 1;
              transform: scale(1);
            }
          }
          
          @keyframes fadeIn {
            from {
              opacity: 0;
              transform: translateY(-5px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }
        `}
      </style>
    </div>
  );
};

const Cart: React.FC = () => {
  const {
    cartItems,
    removeFromCart,
    updateQuantity,
    clearCart,
    getTotalPrice,
    applyCoupon,
    removeCoupon,
    appliedCoupon,
    discountedTotalPrice,
  } = useCart();
  const { id: shopIdFromUrl } = useParams<{ id?: string }>();
  const [orderData, setOrderData] = useState<OrderData>({
    email: "",
    phone: "",
    address: "",
    items: [],
    shopId: 0,
  });
  const [addressCoordinates, setAddressCoordinates] = useState<{
    lat: number;
    lng: number;
  } | null>(null);
  const [showCaptcha, setShowCaptcha] = useState(false);
  const [captchaVerified, setCaptchaVerified] = useState(false);
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [orderSuccess, setOrderSuccess] = useState(false);
  const [couponCode, setCouponCode] = useState("");

  const [validationErrors, setValidationErrors] = useState({
    email: "",
    phone: "",
    address: "",
  });

  const shopId = shopIdFromUrl
    ? parseInt(shopIdFromUrl)
    : cartItems[0]?.product.shopId || 1;

  const validateEmail = (email: string) => {
    if (!email) return "–ü–æ–ª–µ email –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(email)) return "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É";
    return "";
  };

  const validatePhone = (phone: string) => {
    if (!phone) return "–ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    const phoneRegex = /^(\+38)?0\d{9}$/;
    const cleanPhone = phone.replace(/[\s\-\(\)]/g, "");
    if (!phoneRegex.test(cleanPhone)) {
      return "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX –∞–±–æ 0XXXXXXXXX";
    }
    return "";
  };

  const validateAddress = (address: string) => {
    if (!address) return "–ü–æ–ª–µ –∞–¥—Ä–µ—Å–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    if (address.length < 10)
      return "–ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤)";
    return "";
  };

  const handleEmailChange = (value: string) => {
    setOrderData((prev) => ({ ...prev, email: value }));
    setValidationErrors((prev) => ({
      ...prev,
      email: validateEmail(value),
    }));
  };

  const handlePhoneChange = (value: string) => {
    const cleaned = value.replace(/[^\d+\-\(\)\s]/g, "");
    setOrderData((prev) => ({ ...prev, phone: cleaned }));
    setValidationErrors((prev) => ({
      ...prev,
      phone: validatePhone(cleaned),
    }));
  };

  const handleAddressChange = (value: string) => {
    setOrderData((prev) => ({ ...prev, address: value }));
    setValidationErrors((prev) => ({
      ...prev,
      address: validateAddress(value),
    }));
  };

  const handleAddressSelect = useCallback(
    (address: string, coordinates: { lat: number; lng: number }) => {
      setOrderData((prev) => ({ ...prev, address }));
      setAddressCoordinates(coordinates);
      setValidationErrors((prev) => ({
        ...prev,
        address: validateAddress(address),
      }));
    },
    []
  );

  const handleAddressInputChange = useCallback(
    (e: React.ChangeEvent<HTMLTextAreaElement>) => {
      handleAddressChange(e.target.value);
    },
    []
  );

  const handleOrderButtonClick = () => {
    const emailError = validateEmail(orderData.email);
    const phoneError = validatePhone(orderData.phone);
    const addressError = validateAddress(orderData.address);

    setValidationErrors({
      email: emailError,
      phone: phoneError,
      address: addressError,
    });

    if (emailError || phoneError || addressError) {
      return;
    }

    setShowCaptcha(true);
  };

  const handleCaptchaVerify = (isValid: boolean) => {
    setCaptchaVerified(isValid);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!captchaVerified) {
      return;
    }

    setIsSubmitting(true);

    const order: OrderData & { coordinates?: { lat: number; lng: number } } = {
      ...orderData,
      items: cartItems.map((item) => ({
        productId: item.product.id,
        name: item.product.name,
        price: item.product.price,
        quantity: item.quantity,
      })),
      createdAt: new Date().toISOString(),
      shopId,
      coordinates: addressCoordinates || undefined,
      couponCode: appliedCoupon?.code || null,
    };

    try {
      const response = await axios.post(`${API_BASE_URL}/orders`, order);
      const orderId = response.data.id;
      setOrderSuccess(true);
      clearCart();
      if (appliedCoupon) {
        removeCoupon();
      }
      navigate(`/order/${orderId}`);
    } catch (error) {
      console.error("Error creating order:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleApplyCoupon = () => {
    applyCoupon(couponCode);
    setCouponCode("");
  };

  if (orderSuccess) {
    return (
      <div className="cart-container">
        <div className="cart-success-state">
          <h2 className="cart-success-title">
            –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ! üéâ
          </h2>
          <p className="cart-success-text">
            –î—è–∫—É—é –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.
          </p>
          <Link to="/" className="cart-back-link">
            –Ω–∞ –ì–û–õ–û–í–ù–£
          </Link>
        </div>
      </div>
    );
  }

  if (cartItems.length === 0) {
    return (
      <div className="cart-container">
        <div className="cart-empty-state">
          <h2 className="cart-empty-title">–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</h2>
          <p className="cart-empty-text">–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –∑ –∫–∞—Ç–∞–ª–æ–≥—É</p>
          <Link to="/" className="cart-back-link">
            –Ω–∞ –ì–û–õ–û–í–ù–£
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="cart-container">
      <Link to="/" className="cart-back-link">
        ‚Üê –Ω–∞ –ì–û–õ–û–í–ù–£
      </Link>
      <h1 className="cart-title">–ö–æ—à–∏–∫</h1>

      <div className="cart-layout">
        <div className="cart-items-container">
          {cartItems.map((item) => (
            <div key={item.product.id} className="cart-item-card">
              <img
                src={item.product.imageUrl || "/images/placeholder.jpg"}
                alt={item.product.name}
                className="cart-item-image"
                onError={(e) => {
                  (e.target as HTMLImageElement).src =
                    "/images/placeholder.jpg";
                }}
              />
              <div className="cart-item-info">
                <h4 className="cart-item-name">{item.product.name}</h4>
                <p className="cart-item-price">{item.product.price} –≥—Ä–Ω</p>
              </div>
              <div className="cart-quantity-controls">
                <button
                  className="quantity-btn"
                  onClick={() =>
                    updateQuantity(item.product.id, item.quantity - 1)
                  }
                  disabled={item.quantity <= 1}
                >
                  -
                </button>
                <span className="quantity-display">{item.quantity}</span>
                <button
                  className="quantity-btn"
                  onClick={() =>
                    updateQuantity(item.product.id, item.quantity + 1)
                  }
                >
                  +
                </button>
                <button
                  className="cart-remove-btn"
                  onClick={() => removeFromCart(item.product.id)}
                >
                  –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
              </div>
            </div>
          ))}
          <div className="coupon-section">
            <input
              type="text"
              placeholder="–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫—É–ø–æ–Ω–∞"
              className="cart-form-input coupon-input"
              value={couponCode}
              onChange={(e) => setCouponCode(e.target.value)}
            />
            <button
              className="cart-submit-btn coupon-btn"
              onClick={handleApplyCoupon}
            >
              –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
            </button>
          </div>
          {appliedCoupon && (
            <div className="coupon-applied">
              <p>
                –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π –∫—É–ø–æ–Ω: {appliedCoupon.code} (-
                {appliedCoupon.discount}%)
              </p>
              <button className="cart-remove-btn" onClick={removeCoupon}>
                –í–∏–¥–∞–ª–∏—Ç–∏ –∫—É–ø–æ–Ω
              </button>
            </div>
          )}
        </div>

        <div className="cart-summary-container">
          <h3
            className={`cart-total ${
              appliedCoupon ? "cart-total-discounted" : ""
            }`}
          >
            –í—Å—å–æ–≥–æ: {appliedCoupon ? discountedTotalPrice() : getTotalPrice()}{" "}
            –≥—Ä–Ω
          </h3>

          <div className="cart-order-form">
            <h3 className="cart-form-title">–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>

            <div className="form-field">
              <input
                type="email"
                placeholder="Email (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: user@example.com)"
                className={`cart-form-input ${
                  validationErrors.email ? "error" : ""
                }`}
                value={orderData.email}
                onChange={(e) => handleEmailChange(e.target.value)}
                required
              />
              {validationErrors.email && (
                <div className="validation-error">{validationErrors.email}</div>
              )}
            </div>

            <div className="form-field">
              <input
                type="tel"
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω (+380XXXXXXXXX)"
                className={`cart-form-input ${
                  validationErrors.phone ? "error" : ""
                }`}
                value={orderData.phone}
                onChange={(e) => handlePhoneChange(e.target.value)}
                required
              />
              {validationErrors.phone && (
                <div className="validation-error">{validationErrors.phone}</div>
              )}
            </div>

            <div className="address-input-container">
              <div className="form-field">
                <textarea
                  placeholder="–ê–¥—Ä–µ—Å–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—ñ –Ω–∏–∂—á–µ)"
                  className={`cart-form-input ${
                    validationErrors.address ? "error" : ""
                  }`}
                  rows={2}
                  value={orderData.address}
                  onChange={handleAddressInputChange}
                  required
                />
                {validationErrors.address && (
                  <div className="validation-error">
                    {validationErrors.address}
                  </div>
                )}
              </div>
              <small className="address-hint">
                üí° –í–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç—É—Ç –∞–±–æ –≤–∏–±—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ –Ω–∏–∂—á–µ
              </small>
            </div>

            <div className="map-section">
              <h4 className="map-title">–í–∏–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</h4>
              <GoogleMapComponent
                onAddressSelect={handleAddressSelect}
                selectedAddress={orderData.address}
                shopId={shopId}
              />
              {SHOP_LOCATIONS[shopId as keyof typeof SHOP_LOCATIONS] && (
                <div className="map-legend">
                  <div className="legend-item">
                    <span className="legend-marker shop">üè™</span>
                    <span>
                      –ù–∞—à –º–∞–≥–∞–∑–∏–Ω:{" "}
                      {
                        SHOP_LOCATIONS[shopId as keyof typeof SHOP_LOCATIONS]
                          .name
                      }
                      <br />
                      <small style={{ color: "#666", fontSize: "11px" }}>
                        {
                          SHOP_LOCATIONS[shopId as keyof typeof SHOP_LOCATIONS]
                            .address
                        }
                      </small>
                    </span>
                  </div>
                  <div className="legend-item">
                    <span className="legend-marker delivery">üìç</span>
                    <span>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É)</span>
                  </div>
                  <div className="legend-item">
                    <span
                      className="legend-marker route"
                      style={{ color: "#db7093" }}
                    >
                      ‚îÅ‚îÅ
                    </span>
                    <span>–ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏</span>
                  </div>
                </div>
              )}
            </div>

            {!showCaptcha ? (
              <button
                type="button"
                onClick={handleOrderButtonClick}
                className="cart-submit-btn"
              >
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
              </button>
            ) : (
              <div>
                <SimpleRobotCaptcha
                  onVerify={handleCaptchaVerify}
                  isVisible={showCaptcha}
                />
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting || !captchaVerified}
                  className="cart-submit-btn"
                  style={{
                    marginTop: "1rem",
                    opacity: captchaVerified ? 1 : 0.6,
                  }}
                >
                  {isSubmitting ? "–û—Ñ–æ—Ä–º–ª—è—î–º–æ..." : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Cart;
