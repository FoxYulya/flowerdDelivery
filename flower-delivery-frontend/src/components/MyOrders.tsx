import React, { useState } from "react";
import { Link } from "react-router-dom";
import axios from "axios";

const API_BASE_URL = "https://flowerddelivery-1.onrender.com/";

interface Order {
  id: number;
  email: string;
  phone: string;
  address: string;
  items: { productId: number; name: string; price: number; quantity: number }[];
  createdAt: string;
  shopId: number;
  coupon?: { code: string; discount: number };
}

const MyOrders: React.FC = () => {
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [orderId, setOrderId] = useState("");
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasSearched, setHasSearched] = useState(false);

  const handleSearch = async () => {
    setLoading(true);
    setError(null);
    setHasSearched(true);

    try {
      const hasSearchParams = email.trim() || phone.trim() || orderId.trim();
      if (!hasSearchParams) {
        setError("–í–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É");
        setLoading(false);
        return;
      }

      const params: any = {};
      if (email.trim()) params.email = email.trim();
      if (phone.trim()) params.phone = phone.trim();
      if (orderId.trim()) {
        const parsedOrderId = parseInt(orderId.trim());
        if (isNaN(parsedOrderId)) {
          setError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
          setLoading(false);
          return;
        }
        params.orderId = parsedOrderId;
      }

      console.log("Sending search params:", params);

      const response = await axios.get(`${API_BASE_URL}/orders/search`, {
        params,
      });
      console.log("Search results:", response.data);

      if (Array.isArray(response.data)) {
        setOrders(response.data);
        if (response.data.length === 0) {
          setError("–ó–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
      } else {
        console.error("Invalid data format:", response.data);
        setError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞");
        setOrders([]);
      }
    } catch (err: any) {
      console.error("Error fetching orders:", err);

      if (err.response?.status === 404) {
        setError("–ó–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        setOrders([]);
      } else {
        const errorMessage =
          err.response?.data?.error || err.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞";
        setError(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å: ${errorMessage}`);
        setOrders([]);
      }
    } finally {
      setLoading(false);
    }
  };

  const clearSearch = () => {
    setEmail("");
    setPhone("");
    setOrderId("");
    setOrders([]);
    setError(null);
    setHasSearched(false);
  };

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString("uk-UA", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch {
      return "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞";
    }
  };

  const calculateOrderTotal = (items: any[]) => {
    if (!Array.isArray(items)) return 0;
    return items.reduce((sum, item) => {
      const price = Number(item.price) || 0;
      const quantity = Number(item.quantity) || 1;
      return sum + price * quantity;
    }, 0);
  };

  return (
    <div className="container">
      <div className="orders-header">
        <Link to="/" className="back-link">
          ‚Üê –Ω–∞ –ì–û–õ–û–í–ù–£
        </Link>
      </div>
      <h1>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>

      <div className="orders-content">
        <div className="search-panel">
          <h3>–ü–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å</h3>
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="search-input"
          />
          <input
            type="tel"
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            className="search-input"
          />
          <input
            type="number"
            placeholder="ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            value={orderId}
            onChange={(e) => setOrderId(e.target.value)}
            className="search-input"
          />
          <button
            onClick={handleSearch}
            className="search-btn"
            disabled={loading}
          >
            {loading ? "–ü–æ—à—É–∫..." : "üîç –ó–Ω–∞–π—Ç–∏"}
          </button>

          {(email || phone || orderId || hasSearched) && (
            <button
              onClick={clearSearch}
              className="clear-btn"
              disabled={loading}
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏
            </button>
          )}

          <div className="search-hint">
            <small>
              üí° –í–≤–µ–¥—ñ—Ç—å email, —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É
            </small>
          </div>
        </div>

        <div className="orders-list">
          {error && (
            <div className="error">
              <p>{error}</p>
            </div>
          )}

          {loading && (
            <div className="loading">
              <p>üîç –ü–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å...</p>
            </div>
          )}

          {!loading && !error && !hasSearched && (
            <div className="no-search">
              <h3>üëã –í—ñ—Ç–∞—î–º–æ!</h3>
              <p>–î–ª—è –ø–æ—à—É–∫—É –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º—ñ –∑–ª—ñ–≤–∞</p>
              <ul>
                <li>üìß Email, —è–∫–∏–π –≤–∏ –≤–∫–∞–∑—É–≤–∞–ª–∏ –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ</li>
                <li>üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</li>
                <li>üî¢ –ê–±–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</li>
              </ul>
            </div>
          )}

          {!loading && orders.length > 0 && (
            <>
              <div className="orders-count">
                –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: <strong>{orders.length}</strong>
              </div>
              {orders.map((order) => {
                console.log("Rendering order:", order);
                return (
                  <div key={order.id} className="order-card">
                    <div className="order-header">
                      <h3>üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</h3>
                      <div className="order-date">
                        {formatDate(order.createdAt)}
                      </div>
                    </div>

                    <div className="order-info">
                      <div className="order-contact">
                        <p>
                          <strong>üìß Email:</strong>{" "}
                          {order.email || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
                        </p>
                        <p>
                          <strong>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</strong>{" "}
                          {order.phone || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
                        </p>
                        <p>
                          <strong>üìç –ê–¥—Ä–µ—Å–∞:</strong>{" "}
                          {order.address || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}
                        </p>
                      </div>

                      {order.coupon && (
                        <div className="order-coupon">
                          <p>
                            <strong>üéüÔ∏è –ö—É–ø–æ–Ω:</strong> {order.coupon.code} (-
                            {order.coupon.discount}%)
                          </p>
                        </div>
                      )}
                    </div>

                    <div className="order-items">
                      <h4>üì¶ –¢–æ–≤–∞—Ä–∏:</h4>
                      {order.items &&
                      Array.isArray(order.items) &&
                      order.items.length > 0 ? (
                        <ul className="items-list">
                          {order.items.map((item, index) => (
                            <li key={index} className="order-item">
                              <span className="item-name">
                                {item.name || "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä"}
                              </span>
                              <span className="item-details">
                                {item.quantity || 1} —à—Ç √ó{" "}
                                {Number(item.price || 0).toFixed(2)} –≥—Ä–Ω
                              </span>
                              <span className="item-total">
                                ={" "}
                                {(
                                  Number(item.price || 0) *
                                  Number(item.quantity || 1)
                                ).toFixed(2)}{" "}
                                –≥—Ä–Ω
                              </span>
                            </li>
                          ))}
                        </ul>
                      ) : (
                        <p className="no-items">–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
                      )}
                    </div>

                    <div className="order-total">
                      <strong>
                        üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:{" "}
                        {calculateOrderTotal(order.items).toFixed(2)} –≥—Ä–Ω
                      </strong>
                    </div>
                  </div>
                );
              })}
            </>
          )}

          {!loading && !error && hasSearched && orders.length === 0 && (
            <div className="no-orders">
              <h3>ü§∑‚Äç‚ôÄÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
              <p>–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MyOrders;
